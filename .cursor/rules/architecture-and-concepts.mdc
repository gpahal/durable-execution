---
alwaysApply: true
description: Durable execution concepts, architecture, and key modules
---
## Architecture

- Orchestrator: `DurableExecutor` ([durable-execution/src/index.ts](mdc:durable-execution/src/index.ts))
- Task system: `task.ts`, `task-internal.ts` for task definitions and execution
- Storage contract and types: `storage.ts`
- Serialization: `serializer.ts` (SuperJSON by default)
- Errors: `errors.ts`; Cancellation: `cancel.ts`; Logging: `logger.ts`

## Execution model

- Status progression: Ready → Running → Completed/Failed/Timed Out
- Parent tasks can spawn children in parallel; sequential chains are supported
- Optional finalize task runs after children complete
- Retries use exponential backoff with configurable options

## Storage expectations

- Implement `DurableStorage` with `withTransaction(fn)` supporting parallel tx where possible.
- `DurableStorageTx` must provide `insertTaskExecutions`, `getTaskExecutionIds`, `getTaskExecutions`, `updateTaskExecutions`.
- Indexing hints (see `DurableTaskExecutionStorageWhere` docs in [storage.ts](mdc:durable-execution/src/storage.ts)):
  - unique index on execution_id
  - composite indexes for `(status, isClosed, expiresAt)` and `(status, startAt)`

## Development quickstart

- Create tasks via `executor.task(...)`, `executor.parentTask(...)` and enqueue with `executor.enqueueTask`.
- Run background processing by `await executor.start()` and stop with `await executor.shutdown()`.
