---
alwaysApply: true
description: Durable execution concepts, lifecycle, and key files
---
### Core concepts

- Tasks are idempotent units of work run by a `DurableExecutor`
- Parent tasks can spawn parallel children and optionally a `finalizeTask`
- Executions are persisted via a `Storage` implementation
- Background processes advance state: close finished, retry expired, cancel, process ready

Key files:

- Executor: [durable-execution/src/index.ts](mdc:durable-execution/src/index.ts)
- Task types/APIs: [durable-execution/src/task.ts](mdc:durable-execution/src/task.ts)
- Storage interface + in-memory impl: [durable-execution/src/storage.ts](mdc:durable-execution/src/storage.ts)
- Cancellation utilities: [durable-execution/src/cancel.ts](mdc:durable-execution/src/cancel.ts)
- Errors: [durable-execution/src/errors.ts](mdc:durable-execution/src/errors.ts)

Execution lifecycle (high level):

- ready → running →
  - completed
  - failed | timed_out | cancelled
  - waiting_for_children_tasks → children_tasks_failed | waiting_for_finalize_task → finalize_task_failed | completed

Important guidelines:

- Register tasks before enqueue; task IDs must be unique within an executor
- Inputs should be validated (use `validateInput()` or `inputSchema()`)
- Use retries thoughtfully; exponential backoff supported via `TaskRetryOptions`
- Respect `cancelSignal` and `shutdownSignal` in long-running work

Docs and examples: [durable-execution/README.md](mdc:durable-execution/README.md)
