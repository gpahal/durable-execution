---
alwaysApply: true
---

# Durable Execution Monorepo Structure

This is a TypeScript monorepo for the durable-execution ecosystem using pnpm workspaces and Turbo.

## Project Layout

### Root Configuration

- [package.json](mdc:package.json) - Monorepo scripts and dev dependencies
- [pnpm-workspace.yaml](mdc:pnpm-workspace.yaml) - Workspace configuration with catalogs
- [turbo.json](mdc:turbo.json) - Build orchestration with dependency graphs
- [typedoc.json](mdc:typedoc.json) - Documentation generation config

### Packages Structure

#### Core Package

- [durable-execution/](mdc:durable-execution/) - Main execution engine
  - [src/index.ts](mdc:durable-execution/src/index.ts) - Public API exports
  - [src/executor.ts](mdc:durable-execution/src/executor.ts) - Core DurableExecutor class
  - [src/task.ts](mdc:durable-execution/src/task.ts) - Task definitions and types
  - [src/storage.ts](mdc:durable-execution/src/storage.ts) - Storage interface
  - [src/in-memory-storage.ts](mdc:durable-execution/src/in-memory-storage.ts) - Default storage impl
  - Sleeping tasks, parent tasks, sequential tasks, and polling tasks are documented in
    [README.md](mdc:durable-execution/README.md) and surfaced via `DurableExecutor.sleepingTask`,
    `DurableExecutor.parentTask`, `DurableExecutor.sequentialTasks`, and `DurableExecutor.pollingTask`.

#### Extension Packages

- [durable-execution-orpc-utils/](mdc:durable-execution-orpc-utils/) - oRPC integration utilities
  - [src/index.ts](mdc:durable-execution-orpc-utils/src/index.ts) - Single public entrypoint exporting `createTasksRouter` and `convertProcedureClientToTask`
  - [README.md](mdc:durable-execution-orpc-utils/README.md) - Usage examples for server/client and remote task execution
  - [tests/index.test.ts](mdc:durable-execution-orpc-utils/tests/index.test.ts) - End-to-end tests for the API
- [durable-execution-storage-drizzle/](mdc:durable-execution-storage-drizzle/) - Drizzle ORM storage implementations
- [durable-execution-storage-test-utils/](mdc:durable-execution-storage-test-utils/) - Testing utilities for storage implementations

## Package Standards

### Common Structure

Each package follows this structure:

- `src/` - Source TypeScript files
- `tests/` - Vitest test files
- `package.json` - Package metadata and scripts
- `tsconfig.json` - TypeScript configuration extending `@gpahal/tsconfig/base.json`
- `tsup.config.ts` - Build configuration
- `vitest.config.ts` - Test configuration
- `eslint.config.mjs` - ESLint configuration using `@gpahal/eslint-config/base`
- `CLAUDE.md` - Package-specific development guidance

### Build System

- Uses Turbo for parallel builds with dependency resolution
- TypeScript compiled with tsup bundler
- ESM modules only (`"type": "module"`)
- Strict TypeScript configuration

### Dependencies

- Catalog-based dependency management in [pnpm-workspace.yaml](mdc:pnpm-workspace.yaml)
- Workspace dependencies for inter-package references
- Node.js >=20.0.0 requirement across all packages
