---
globs: durable-execution/**
description: Core package structure and usage tips
---
### Core package (`durable-execution`)

- Main orchestrator: `DurableExecutor` in [src/index.ts](mdc:durable-execution/src/index.ts)
- Task APIs: `task`, `parentTask`, `sequentialTasks`, `validateInput`, `inputSchema` in [src/index.ts](mdc:durable-execution/src/index.ts) and types in [src/task.ts](mdc:durable-execution/src/task.ts)
- Storage interface and helpers in [src/storage.ts](mdc:durable-execution/src/storage.ts)
- Cancellation in [src/cancel.ts](mdc:durable-execution/src/cancel.ts)
- Error hierarchy in [src/errors.ts](mdc:durable-execution/src/errors.ts)

Usage notes:

- Always construct `DurableExecutor(storage, options)` once; start via `executor.start()` and stop via `executor.shutdown()`
- Use `executor.task()` for simple tasks, `executor.parentTask()` for tasks that spawn children, and `executor.sequentialTasks()` for pipelines
- Enqueue with `executor.enqueueTask(task, input, options)`; manage execution with the returned handle
- For input validation, prefer `inputSchema()` with Standard Schema (e.g., Zod)

Refer to examples in [README.md](mdc:durable-execution/README.md)
